'''
The ai of this is script is enumerate the different users,
rols and policies attached to a IAM user.
'''
import boto3
import os
import re

from colorama import Fore, Style

def get_aws_user(client_sts):
    try:
        return re.search('user\/([^\s]+)', clien_sts.get_caller_identity()['Arn']).group(1)
    except:
        raise ValueError("The username has not been found")

def get_aws_policies(client_iam, user):
    policies = {}
    for policy in client_iam.list_user_policies(UserName=user)['PolicyNames']:
        policies[policy] = policy
        print(Fore.GREEN+"[+]The policy "+Fore.YELLOW+f"{policy}"+Fore.GREEN+" is attached to the user"+Fore.YELLOW+ f" {user}\n"+Style.RESET_ALL)
        print(Fore.GREEN+"[*]Numerating the policy content"+Style.RESET_ALL+"\n")
        doc = client_iam.get_user_policy(UserName=user, PolicyName=policy)['PolicyDocument']
        for data in doc['Statement']:
            print("Sid: " + data['Sid'])
            print(Fore.RED+"Effect: " + data['Effect']+Style.RESET_ALL)
            print(Fore.RED+"Action: "+Style.RESET_ALL)
            actions = data['Action']
            if type(actions) == str:
                print(Fore.RED+f'\t{actions}'+Style.RESET_ALL)
            else:
                for action in data['Action']:
                    print(Fore.RED+f"\t{action}"+Style.RESET_ALL)
            print("\n")



if __name__ == '__main__':

    os.environ["AWS_PROFILE"] = "bilbo"
    client_iam = boto3.client('iam') 
    clien_sts = boto3.client('sts')

    user_arn = clien_sts.get_caller_identity()['Arn']
    print(Fore.GREEN+"[*] Identifying user\n"+Style.RESET_ALL)
    user = get_aws_user(clien_sts)
    print(Fore.GREEN+"[*] Enumerating policies\n"+Style.RESET_ALL)
    get_aws_policies(client_iam, user)
    
    
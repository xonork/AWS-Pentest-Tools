'''
The ai of this is script is enumerate the different users,
rols and policies attached to a IAM user.
'''
import boto3
import os
import re

from colorama import Fore, Style

def get_aws_user(client_sts):
    try:
        return re.search('user\/([^\s]+)', clien_sts.get_caller_identity()['Arn']).group(1)
    except:
        raise ValueError("The username has not been found")

def get_aws_policies(client_iam, user):
    policies = {}
    print(Fore.RED+"Embedded Policies:"+Style.RESET_ALL)
    for policy in client_iam.list_user_policies(UserName=user)['PolicyNames']:
        print("\t"+Fore.GREEN+"[+]The policy "+Fore.YELLOW+f"{policy}"+Fore.GREEN+" is attached to the user"+Fore.YELLOW+ f" {user}\n"+Style.RESET_ALL)
        print("\t"+Fore.GREEN+"[*]Numerating the policy content"+Style.RESET_ALL+"\n")
        doc = client_iam.get_user_policy(UserName=user, PolicyName=policy)['PolicyDocument']
        for data in doc['Statement']:
            print("\t\t"+"Sid: " + data['Sid'])
            print("\t\t"+Fore.RED+"Effect: " + data['Effect']+Style.RESET_ALL)
            print("\t\t"+Fore.RED+"Action: "+Style.RESET_ALL)
            actions = data['Action']
            if type(actions) == str:
                print(Fore.RED+f'\t\t\t{actions}'+Style.RESET_ALL)
            else:
                for action in data['Action']:
                    print(Fore.RED+f"\t\t\t{action}"+Style.RESET_ALL)
            print("\n")
    print(Fore.RED+"Managed Policies:"+Style.RESET_ALL)
    for policy in client_iam.list_attached_user_policies(UserName=user)['AttachedPolicies']:
        print("\t"+Fore.GREEN+"[+]The policy "+Fore.YELLOW+f"{policy['PolicyName']}"+Fore.GREEN+" is attached to the user"+Fore.YELLOW+ f" {user}\n"+Style.RESET_ALL)
        doc = client_iam.get_policy(PolicyArn=policy['PolicyArn'])['Policy']
        print("\t\t"+Fore.RED+"Arn: " + doc['Arn']+Style.RESET_ALL)
        print("\t\t"+Fore.RED+"Description: " + doc['Description']+Style.RESET_ALL)
        print("\t\t"+Fore.RED+"DefaultVersionId: " + doc['DefaultVersionId']+Style.RESET_ALL)
        print("\t\t"+Fore.YELLOW+"It is recommended to check old versions")
        print("\n")
def get_roles(client_iam):
    roles = []
    for rol in client_iam.list_roles()['Roles']:
        roles.append(rol['RoleName'])
    return roles

def get_roles_policies(client_iam, roles):
    for rol in roles:
        for policy in client_iam.list_role_policies(RoleName=rol)['PolicyNames']:
            print("\t"+Fore.GREEN+"[+]The policy "+Fore.YELLOW+f"{policy}"+Fore.GREEN+" is attached to the rol"+Fore.YELLOW+ f" {rol}\n"+Style.RESET_ALL)
            print("\t"+Fore.GREEN+"[*]Numerating the policy content"+Style.RESET_ALL+"\n")
            doc = client_iam.get_role_policy(RoleName=rol, PolicyName=policy)['PolicyDocument']
            for data in doc['Statement']:
                print("\t\t"+Fore.RED+"Effect: " + data['Effect']+Style.RESET_ALL)
                print("\t\t"+Fore.RED+"Action: "+Style.RESET_ALL)
                actions = data['Action']
                if type(actions) == str:
                    print(Fore.RED+f'\t\t\t{actions}'+Style.RESET_ALL)
                else:
                    for action in data['Action']:
                        print(Fore.RED+f"\t\t\t{action}"+Style.RESET_ALL)
                print("\t\t"+Fore.RED+"Rresource: "+Style.RESET_ALL)
                resources = data['Resource']
                if type(resources) == str:
                    print(Fore.RED+f'\t\t\t{resources}'+Style.RESET_ALL)
                else:
                    for resource in data['Resource']:
                        print(Fore.RED+f"\t\t\t{resource}"+Style.RESET_ALL)
                print("\n")
        
                
if __name__ == '__main__':

    session = boto3.Session(profile_name='raynor')
    client_iam = session.client('iam') 
    clien_sts = session.client('sts')

    user_arn = clien_sts.get_caller_identity()['Arn']
    print(Fore.GREEN+"[*] Identifying user\n"+Style.RESET_ALL)
    user = get_aws_user(clien_sts)
    print(Fore.GREEN+"[*] Enumerating policies\n"+Style.RESET_ALL)
    get_aws_policies(client_iam, user)
    print(Fore.GREEN+"[*] Enumerating rols\n"+Style.RESET_ALL)
    roles = get_roles(client_iam)
    get_roles_policies(client_iam, roles)
    
    